2.5-5/2
2.5-2
0.5/2
pnorm(2.5)
source('~/datasci/utils.R')
installAndHardRequire(c('DBI', 'RMySQL))
installAndHardRequire(c('DBI', 'RMySQL'))
installAndHardRequire(c('DBI', 'RMySQL'))
library(DBI)
conn <- dbConnect("RMySQL", dbname="recommender")
library(RMySQL)
conn <- dbConnect("RMySQL", dbname="recommender")
conn <- dbConnect(RMySQL, dbname="recommender")
dbConnect(dbDriver("MySQL"), user='root', password='stuff23', dbname='recommender')
conn <- dbConnect(dbDriver("MySQL"), user='root', password='stuff23', dbname='recommender')
dbListTables(conn)
dbConnect(dbDriver("MySQL"), user='root', dbname='recommender')
# CREATE USER 'recommender'@'localhost';
conn <- dbConnect(dbDriver("MySQL"), user='recommender', dbname='recommender')
conn <- dbConnect(dbDriver("MySQL"), user='recommender', dbname='recommender')
dbListTables(conn)
res <- dbSendQuery(conn, "SELECT * FROM user_action_oct20")
fetched <- dbFetch(res)
userActionOct20 <- fetched
remove(fetched)
userActionOct20[,range(1,20)]
userActionOct20[range(1,20),]
as.date(userActionOct20[range(1,20),date_of])
as.Date(userActionOct20[range(1,20),date_of])
as.Date(userActionOct20$date_of[range(1,20)])
length(userActionOct20$date_of)
userActionOct20$day <- as.Date(userActionOct20$date_of)
aggregateOct20 <- aggregate(user_action, by=list(action, algorithm_id, stripe_id, user_context_id))
aggregateOct20 <- aggregate(user_actionOct20, by=list(action, algorithm_id, stripe_id, user_context_id), FUN=length, na.rm = TRUE)
aggregateOct20 <- aggregate(userActionOct20, by=list(action, algorithm_id, stripe_id, user_context_id), FUN=length, na.rm = TRUE)
aggregateOct20 <- aggregate(userActionOct20, by=list(action, algorithm_id, stripe_id, user_context_id), FUN=length, na.rm = TRUE)
attach(userActionOct20)
aggregateOct20 <- aggregate(userActionOct20, by=list(action, algorithm_id, stripe_id, user_context_id), FUN=length, na.rm = TRUE)
aggregateOct20 <- aggregate(userActionOct20[,range(1,20)], by=list(action, algorithm_id, stripe_id, user_context_id), FUN=length, na.rm = TRUE)
aggregateOct20 <- aggregate(userActionOct20[range(1,20),], by=list(action, algorithm_id, stripe_id, user_context_id), FUN=length, na.rm = TRUE)
actionAgg <- aggregate(userActionOct20[range(1,20),], by=list(action),
);
summaryOct20 <- dbFetch(dbSendQuery(conn, "SELECT * FROM summary_oct20"))
summaryOct20$ctr <- summaryOct20
remove(summaryOct20$ctr)
summaryOct20 <- dbFetch(dbSendQuery("SELECT * FROM summary_bytype_oct20"))
summaryOct20 <- dbFetch(dbSendQuery(conn, "SELECT * FROM summary_bytype_oct20"))
summaryOct20$ctr = summaryOct20$click_count / summaryOct20$load_count
hist(summaryOct20$ctr)
hist(summaryOct20$ctr, breaks=100)
length(summaryOct20$ctr[summaryOct20$ctr > 1])
summaryOct20[summaryOct20$ctr > 1]
summaryOct20[summaryOct20$ctr > 1,]
outOfRangeCTR <- summaryOct20[summaryOct20$ctr > 1,]
summaryOct20 <- summaryOct20[summaryOct20$ctr <= 1,]
ggplot(summaryOct20, aes(ctr)) + geom_hist()
library(ggplot2)
library("ggplot2")
ggplot(summaryOct20, aes(ctr)) + geom_hist()
ggplot(summaryOct20, aes(ctr)) + geom_histogram()
ggplot(summaryOct20, aes(ctr, algorihtm_id)) + geom_boxplot()
ggplot(summaryOct20, aes(ctr, algorithm_id)) + geom_boxplot()
ggplot(summaryOct20[summaryOct20$algorithm_id=1], aes(ctr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 1], aes(ctr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 1, ], aes(ctr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 1 && summaryOct20$ctr < 0.1, ], aes(ctr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 1 & summaryOct20$ctr < 0.1, ], aes(ctr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 1 & summaryOct20$ctr < 0.01, ], aes(ctr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 8 & summaryOct20$ctr < 0.01, ], aes(ctr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 10 & summaryOct20$ctr < 0.01, ], aes(ctr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 10 & summaryOct20$ctr < 0.01, ], aes(ctr)) + geom_histogram(binwiwdth= 0.0001)
ggplot(summaryOct20[summaryOct20$algorithm_id == 10 & summaryOct20$ctr < 0.01, ], aes(ctr)) + geom_histogram(binwidth= 0.0001)
ggplot(summaryOct20[summaryOct20$algorithm_id == 8 & summaryOct20$ctr < 0.01, ], aes(ctr)) + geom_histogram(binwidth= 0.0001)
summaryOct20$logCtr <- log10(summaryOct20$ctr)
ggplot(summaryOct20[summaryOct20$algorithm_id == 8, ], aes(logCtr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 1, ], aes(logCtr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 10, ], aes(logCtr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 1, ], aes(logCtr)) + geom_histogram()
ggplot(summaryOct20[summaryOct20$algorithm_id == 8, ], aes(logCtr)) + geom_histogram()
summaryOct20$logClicks <- log10(summaryOct20$click_count)
algorithm1 <- summaryOct20[summaryOct20$algorithm_id == 1, ]
algorithm8 <- summaryOct20[summaryOct20$algorithm_id == 8, ]
algorithm10 <- summaryOct20[summaryOct20$algorithm_id == 10, ]
ggplot(algorithm1, aes(logCtr)) + geom_histogram(0)
ggplot(algorithm1, aes(logCtr)) + geom_histogram()
ggplot(algorithm8, aes(logCtr)) + geom_histogram()
ggplot(algorithm10, aes(logCtr)) + geom_histogram()
ggplot(algorithm1, aes(logCtr)) + geom_histogram()
ggplot(algorithm8, aes(logCtr)) + geom_histogram()
ggplot(algorithm10, aes(logCtr)) + geom_histogram()
ggplot(algorithm1, aes(logCtr)) + geom_histogram()
ggplot(algorithm1, aes(logClicks)) + geom_histrogram()
ggplot(algorithm1, aes(logClicks)) + geom_histogram()
ggplot(algorithm8, aes(logClicks)) + geom_histogram()
ggplot(algorithm10, aes(logClicks)) + geom_histogram()
ggplot(algorithm1, aes(stripe_id, click_count)) +
geom_point() + scale_y_log10()
factor(algorithm1$stripe_id)
algorithm1$stripe_id <- factor(algorithm1$stripe_id)
geom_point() + scale_y_log10()
algorithm1 <- summaryOct20[summaryOct20$algorithm_id == 1, ]
algorithm1$stripe_id <- factor(algorithm1$stripe_id)
algorithm1 <- summaryOct20[summaryOct20$algorithm_id == 1, ]
ggplot(algorithm1, aes(stripe_id, click_count)) + geom_point() + scale_y_log10()
algorithm8$stripe_id <- factor(algorithm8$stripe_id)
algorithm8 <- summaryOct20[summaryOct20$algorithm_id == 8, ]
algorithm10 <- summaryOct20[summaryOct20$algorithm_id == 10, ]
ggplot(algorithm1, aes(user_context_id, click_count)) + geom_point() + scale_y_log10()
ggplot(algorithm8, aes(user_context_id, click_count)) + geom_point() + scale_y_log10()
ggplot(algorithm10, aes(user_context_id, click_count)) + geom_point() + scale_y_log10()
ggplot(algorithm1, aes(logClicks)) + geom_histogram()
ggplot(algorithm1, aes(logCtr)) + geom_histogram()
ggplot(algorithm1, aes(ctr)) + geom_histogram()
ggplot(algorithm1, aes(logCtr)) + geom_histogram()
ggplot(algorithm8, aes(logCtr)) + geom_histogram()
ggplot(algorithm10, aes(logCtr)) + geom_histogram()
ggplot(algorithm8, aes(logCtr)) + geom_histogram()
ggplot(algorithm10, aes(logCtr)) + geom_histogram()
ggplot(algorithm1, aes(logClicks)) + geom_histogram()
ggplot(algorithm10, aes(logClicks)) + geom_histogram()
ggplot(algorithm8, aes(logClicks)) + geom_histogram()
ggplot(algorithm1, aes(logClicks)) + geom_histogram()
library(gglot2)
library('gglot2')
library(ggplot2)
ggplot(algorithm1, aes(logClicks)) + geom_histogram()
ggplot(algorithm10, aes(logClicks)) + geom_histogram()
ggplot(algorithm8, aes(logClicks)) + geom_histogram()
ggplot(algorithm1, aes(logClicks)) + geom_histogram() + geom_vline(xintercept=1.0, colour="red", linetype="longdash")
geom_vline(xintercept=1.0, colour="red", linetype="longdash") + geom_vline(xintercept=1.0, colour="red", linetype="longdash")
ggplot(algorithm8, aes(logCtr)) + geom_histogram() + geom_vline(xintercept=1.0, colour="red", linetype="longdash")
ggplot(algorithm8, aes(logCtr)) + geom_histogram() + geom_vline(xintercept=0.01, colour="red", linetype="longdash")
ggplot(algorithm8, aes(logCtr)) + geom_histogram() + geom_vline(xintercept=-2, colour="red", linetype="longdash")
ggplot(algorithm8, aes(logCtr)) + geom_histogram() + geom_vline(xintercept=1.0, colour="red", linetype="longdash")
ggplot(algorithm8, aes(logClicks)) + geom_histogram() + geom_vline(xintercept=0.0, colour="red", linetype="longdash")
ggplot(algorithm8, aes(logClicks)) + geom_histogram() + geom_vline(xintercept=1.0, colour="red", linetype="longdash")
install.packages("PASWR")
library(PASWR)
summary(titanic3)
library(glmnet)
count(titanic3[titanic3$parch > 8])
titanic3[titanic3$parch > 8, ]
model1 <- glm (survived ~ parch, data = titanic3, family = binomial())
summary(model1)
aggParch <- aggregate(titanic3, by=list(survived, parch), FUN=count, na.rm = TRUE)
aggParch <- aggregate(titanic3, by=list(survived, parch), FUN=length, na.rm = TRUE)
attach (titanic3)
aggParch <- aggregate(titanic3, by=list(survived, parch), FUN=length, na.rm = TRUE)
agg2 <- aggregate(survived ~ parch, data=titanic3, count)
agg2 <- aggregate(survived ~ parch, data=titanic3, FUN = length)
agg2
titanic3$lived <- titatic3[titanic3$survived == 1]
head(titanic3)
lived <- titanic3[titanic3$survived ==1]
lived <- titanic3[titanic3$survived ==1, ]
died <- titanic3[titanic3$survived == 0,]
aggLived <- aggregate(lived, by(parch), FUN=count, na.rm = TRUE)
aggLived <- aggregate(lived, by(parch), FUN=length, na.rm = TRUE)
aggLived <- aggregate(lived, by=list(parch), FUN=length, na.rm = TRUE)
aggLived <- aggregate(lived$parch, by=list(parch), FUN=length, na.rm = TRUE)
live$parch
lived$parch
aggregate(lived$parch)
myTable <- table(titanic$parch, titanic$survived)
myTable <- table(titanic3$parch, titanic3$survived)
myTable
myTable[0,]
myTable[,0
myTable[,0]
myTable[,c(0)]
myTable[,c(2)]
myTable[,c(1)]
df <- data.frame(myTable)
df
lived <- myTable[,c(2)]
myTable$total = myTable[,c(2)] + myTable[,c(1)]
myTable
myTable$0
myTable[,c(0)]
myTable[,c(1)]
myTable <- table(titanic3$parch, titanic3$survived)
myTable
data.frame(myTable)
as.data.frame(myTable)
myTable
summary(myTable)
library(plyr)
summ <- count(titanic3, c('survived', 'parch'))
summ
lived <- summ[summ$survived = 0]
lived <- summ[summ$survived =- 0]
lived <- summ[summ$survived == 0]
lived <- summ[summ$survived == 0, ]
died <- summ[summ$survived == 1, ]
lived
died
lived <- summ[summ$survived == 1, ]
died <- summ[summ$survived == 0, ]
lived
died
lived$freqLived <- lived$freq
died$freqDied <- died$freq
merge(died, lived, by=c(parch))
livedAndDied <- merge(died, lived, by="parch")
livedAndDied
setwd('/Users/jbocharov/datasci/W207/Final-Project/W207-Final-Facial-Keypoint-Detection')
source('R/reference.R')
source('R/reference.R')
source('R/reference.R')
source('R/reference.R')
source('R/reference.R')
str(d.train)
head(d.train)
im.train <- d.train$Image
d.train$Image <- NULL
head(d.train)
im.train[1]
as.integer(unlist(strsplit(im.train[1], " ")))
install.packages('doMC')
library(doMC)
registerDoMC()
registerDoMC()
im.train <- foreach(im = im.train, .combine=rbind) %dopar% {}
source('R/reference.R')
im <- matrix(data=rev(im.train[1,]), nrow=96, ncol=96)
image(1:96, 1:96, im, col=gray((0:255)/255))
points(96-d.train$nose_tip_x[1],         96-d.train$nose_tip_y[1],         col="red")
points(96-d.train$left_eye_center_x[1],  96-d.train$left_eye_center_y[1],  col="blue")
points(96-d.train$right_eye_center_x[1], 96-d.train$right_eye_center_y[1], col="green")
for(i in 1:nrow(d.train)) {
points(96-d.train$nose_tip_x[i], 96-d.train$nose_tip_y[i], col="red")
}
idx <- which.max(d.train$nose_tip_x)
im  <- matrix(data=rev(im.train[idx,]), nrow=96, ncol=96)
image(1:96, 1:96, im, col=gray((0:255)/255))
points(96-d.train$nose_tip_x[idx], 96-d.train$nose_tip_y[idx], col="red")
olMeans(d.train, na.rm=T)
colMeans(d.train, na.rm=T)
p           <- matrix(data=colMeans(d.train, na.rm=T), nrow=nrow(d.test), ncol=ncol(d.train), byrow=T)
colnames(p) <- names(d.train)
predictions <- data.frame(ImageId = 1:nrow(d.test), p)
head(p)
install.packages('reshape2')
library(reshape2)
example.submission <- read.csv(paste0(data.dir, 'submissionFileFormat.csv'))
sub.col.names      <- names(example.submission)
example.submission$Location <- NULL
submission <- merge(example.submission, submission, all.x=T, sort=F)
submission <- submission[, sub.col.names]
write.csv(submission, file="submission_means.csv", quote=F, row.names=F)
example.submission <- read.csv(paste0(data.dir, 'submissionFileFormat.csv'))
sub.col.names      <- names(example.submission)
sub.col.names
example.submission$Location <- NULL
submission <- merge(example.submission, submission, all.x=T, sort=F)
submission <- submission[, sub.col.names]
write.csv(submission, file="submission_means.csv", quote=F, row.names=F)
submission <- melt(predictions, id.vars="ImageId", variable.name="FeatureName", value.name="Location")
xample.submission <- read.csv(paste0(data.dir, 'submissionFileFormat.csv'))
sub.col.names      <- names(example.submission)
example.submission$Location <- NULL
submission <- merge(example.submission, submission, all.x=T, sort=F)
submission <- submission[, sub.col.names]
write.csv(submission, file="submission_means.csv", quote=F, row.names=F)
example.submission <- read.csv(paste0(data.dir, 'submissionFileFormat.csv'))
sub.col.names      <- names(example.submission)
example.submission$Location <- NULL
submission <- merge(example.submission, submission, all.x=T, sort=F)
submission <- submission[, sub.col.names]
write.csv(submission, file="submission_means.csv", quote=F, row.names=F)
submission <- melt(predictions, id.vars="ImageId", variable.name="FeatureName", value.name="Location")
head(submission)
example.submission <- read.csv(paste0(data.dir, 'submissionFileFormat.csv'))
sub.col.names      <- names(example.submission)
example.submission$Location <- NULL
submission <- merge(example.submission, submission, all.x=T, sort=F)
head(submission)
submission <- submission[, sub.col.names]
write.csv(submission, file="results/submission_means.csv", quote=F, row.names=F)
head(submission)
c('RowId', 'Location')
actual_submission <- submission[, c('RowId', 'Location')]
head(actual_submission)
write.csv(actual_submission, file='results/submission_means.csv', quote=F, row.names=F)
